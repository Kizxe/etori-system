// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String
  role          Role           @default(STAFF)
  department    String?
  stockRequests StockRequest[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum Role {
  STAFF
  ADMIN
}

model Product {
  id            String            @id @default(cuid())
  name          String
  sku           String            @unique // Stock Keeping Unit
  description   String?           @db.Text
  category      Category          @relation(fields: [categoryId], references: [id])
  categoryId    String
  manufacturer  String?
  model         String?
  locations     StorageLocation[]
  minimumStock  Int               @default(0)
  stockRequests StockRequest[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model StorageLocation {
  id        String   @id @default(cuid())
  name      String // e.g., "Warehouse A", "Shelf B3"
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, name]) // Prevent duplicate locations for same product
}

model StockRequest {
  id          String        @id @default(cuid())
  product     Product       @relation(fields: [productId], references: [id])
  productId   String
  requestedBy User          @relation(fields: [userId], references: [id])
  userId      String
  quantity    Int
  status      RequestStatus @default(PENDING)
  notes       String?       @db.Text
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}
